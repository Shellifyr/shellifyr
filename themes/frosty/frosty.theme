# Theme: frosty
# Creator: jappend
# Shell: zsh
# Shell: bash

# Detects the current shell. This will later be used to identify which commands
# should be userd and for which shell. This bit of code is REQUIRED for the theme to work for in 
# between comaptible shells.

if [ -n "$ZSH_VERSION" ]; then
  SHELL_NAME="zsh"
elif [ -n "$BASH_VERSION" ]; then
  SHELL_NAME="bash"
else 
  return
fi

# The [ -t 1 ] check only works when the function is not called from
# a subshell (like in `$(...)` or `(...)`, so this hack redefines the
# function at the top level to always return false when stdout is not
# a tty.
if [ -t 1 ]; then
  is_tty() {
    true
  }
else
  is_tty() {
    false
  }
fi

# Set and use colors, but only if the are supported by the terminal.
function _supports_truecolor {
  case "$COLORTERM" in
  truecolor|24bit) return 0 ;;
  esac

  case "$TERM" in
  iterm           |\
  tmux-truecolor  |\
  linux-truecolor |\
  xterm-truecolor |\
  screen-truecolor) return 0 ;;
  esac

  return 1
}

function _setup_color {
  # Only use colors if connected to a terminal
  if ! is_tty; then
    FMT_RED=""
    FMT_GREEN=""
    FMT_YELLOW=""
    FMT_BLUE=""
    FMT_BOLD=""
    FMT_RESET=""
    return
  fi

  # We can't only add the color codes to the variables, we need to assign a shell readable
  # code that tells the shell to ignore their respetive width, in order to solve terminal
  # line break bugs. These change depending on the shell, as shown below.
  if [ "$SHELL_NAME" = "bash" ]; then
    FMT_RED=$(printf '\[\033[31m\]')
    FMT_GREEN=$(printf '\[\033[32m\]')
    FMT_YELLOW=$(printf '\[\033[33m\]')
    FMT_BLUE=$(printf '\[\033[34m\]')
    FMT_BOLD=$(printf '\[\033[1m\]')
    FMT_RESET=$(printf '\[\033[0m\]')
  elif [ "$SHELL_NAME" = "zsh" ]; then
    FMT_RED='%F{red}'
    FMT_GREEN='%F{green}'
    FMT_YELLOW='%F{yellow}'
    FMT_BLUE='%F{blue}'
    FMT_BOLD='%B'
    FMT_RESET='%f%b'
  fi
}
_setup_color

function _git_prompt_info {
  git_branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
  if [[ -n "$git_branch" ]]; then
    echo "($git_branch)"
  fi
}

# Prompt Style
# If you know the differenecs between bash and zsh, you may know that zsh doesn't know 
# what "\w" means. To solve that and show the directory in both bash in zsh
# we need to treat the Shell's differently. In this example, I use the SHELL_NAME
# variable that was set up in the start of the file to set up the prompt correctly.
function _update_prompt {
  if [ "$SHELL_NAME" = "bash" ]; then
    PS1="${FMT_BLUE}➡️   \w ${FMT_BOLD}$(_git_prompt_info) ${FMT_RESET}$ "
  elif [ "$SHELL_NAME" = "zsh" ]; then
    PS1="${FMT_BLUE}➡️   %~ ${FMT_BOLD}$(_git_prompt_info) ${FMT_RESET}$ "
  fi
}

# Config for each shell
if [ "$SHELL_NAME" = "zsh" ]; then
  precmd() { _update_prompt; }  
  export PROMPT="$PS1"
elif [ "$SHELL_NAME" = "bash" ]; then
  export PROMPT_COMMAND=_update_prompt
fi
